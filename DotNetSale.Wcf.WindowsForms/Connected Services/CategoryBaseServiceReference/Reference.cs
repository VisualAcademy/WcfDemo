//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryBase", Namespace="http://schemas.datacontract.org/2004/07/DotNetSale.Wcf.Models")]
    [System.SerializableAttribute()]
    public partial class CategoryBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OrderOption", Namespace="http://schemas.datacontract.org/2004/07/DotNetSale.Wcf.Models")]
    public enum OrderOption : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ascending = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Descending = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryBaseServiceReference.IBreadShopOf_CategoryBase")]
    public interface IBreadShopOf_CategoryBase {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Browse", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/BrowseResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase Browse(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Browse", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/BrowseResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase> BrowseAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Read", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/ReadResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Read();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Read", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/ReadResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> ReadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Edit", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/EditResponse")]
        bool Edit(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Edit", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Add", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/AddResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase Add(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Add", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/AddResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase> AddAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Delete", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/DeleteResponse")]
        bool Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Delete", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Search", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/SearchResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Search(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Search", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/SearchResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> SearchAsync(string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Has", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/HasResponse")]
        int Has();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Has", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/HasResponse")]
        System.Threading.Tasks.Task<int> HasAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Ordering", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/OrderingResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Ordering(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.OrderOption orderOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Ordering", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/OrderingResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> OrderingAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.OrderOption orderOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Paging", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/PagingResponse")]
        DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Paging(int pageNumber, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBreadShopOf_CategoryBase/Paging", ReplyAction="http://tempuri.org/IBreadShopOf_CategoryBase/PagingResponse")]
        System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> PagingAsync(int pageNumber, int pageSize);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBreadShopOf_CategoryBaseChannel : DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.IBreadShopOf_CategoryBase, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BreadShopOf_CategoryBaseClient : System.ServiceModel.ClientBase<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.IBreadShopOf_CategoryBase>, DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.IBreadShopOf_CategoryBase {
        
        public BreadShopOf_CategoryBaseClient() {
        }
        
        public BreadShopOf_CategoryBaseClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BreadShopOf_CategoryBaseClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BreadShopOf_CategoryBaseClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BreadShopOf_CategoryBaseClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase Browse(int id) {
            return base.Channel.Browse(id);
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase> BrowseAsync(int id) {
            return base.Channel.BrowseAsync(id);
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Read() {
            return base.Channel.Read();
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> ReadAsync() {
            return base.Channel.ReadAsync();
        }
        
        public bool Edit(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model) {
            return base.Channel.Edit(model);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model) {
            return base.Channel.EditAsync(model);
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase Add(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model) {
            return base.Channel.Add(model);
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase> AddAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase model) {
            return base.Channel.AddAsync(model);
        }
        
        public bool Delete(int id) {
            return base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Search(string query) {
            return base.Channel.Search(query);
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> SearchAsync(string query) {
            return base.Channel.SearchAsync(query);
        }
        
        public int Has() {
            return base.Channel.Has();
        }
        
        public System.Threading.Tasks.Task<int> HasAsync() {
            return base.Channel.HasAsync();
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Ordering(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.OrderOption orderOption) {
            return base.Channel.Ordering(orderOption);
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> OrderingAsync(DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.OrderOption orderOption) {
            return base.Channel.OrderingAsync(orderOption);
        }
        
        public DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[] Paging(int pageNumber, int pageSize) {
            return base.Channel.Paging(pageNumber, pageSize);
        }
        
        public System.Threading.Tasks.Task<DotNetSale.Wcf.WindowsForms.CategoryBaseServiceReference.CategoryBase[]> PagingAsync(int pageNumber, int pageSize) {
            return base.Channel.PagingAsync(pageNumber, pageSize);
        }
    }
}
